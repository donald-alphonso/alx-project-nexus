#!/usr/bin/env python3
"""
FIX URGENCE ALX - Restaurer configuration fonctionnelle
"""

import os
from pathlib import Path

def restaurer_urls_simple():
    """Restaurer une configuration URLs simple qui fonctionne"""
    
    print("üö® RESTAURATION URLS SIMPLE")
    
    urls_simple = '''"""
URLs configuration for social_media_backend project.
"""

from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from graphene_django.views import GraphQLView

urlpatterns = [
    # Admin
    path('admin/', admin.site.urls),
    
    # GraphQL (PRIORIT√â)
    path('graphql/', GraphQLView.as_view(graphiql=True)),
]

# Servir les fichiers statiques en d√©veloppement
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
'''
    
    with open('social_media_backend/urls.py', 'w', encoding='utf-8') as f:
        f.write(urls_simple)
    
    print("‚úÖ URLs restaur√©es - GraphQL + Admin seulement")

def desactiver_swagger_temporaire():
    """D√©sactiver Swagger temporairement"""
    
    print("üö® D√âSACTIVATION SWAGGER TEMPORAIRE")
    
    settings_file = Path('social_media_backend/settings.py')
    
    with open(settings_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Commenter drf_spectacular
    content = content.replace("'drf_spectacular',", "# 'drf_spectacular',")
    
    with open(settings_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ drf_spectacular d√©sactiv√©")

def supprimer_api_views():
    """Supprimer api_views.py probl√©matique"""
    
    api_views_file = Path('social_media_backend/api_views.py')
    if api_views_file.exists():
        api_views_file.unlink()
        print("‚úÖ api_views.py supprim√©")

def redemarrer_docker():
    """Red√©marrer Docker rapidement"""
    
    print("üê≥ RED√âMARRAGE DOCKER")
    
    os.system("docker-compose restart web")
    print("‚úÖ Docker red√©marr√©")

def tester_graphql_rapide():
    """Test rapide GraphQL"""
    
    import time
    import requests
    
    print("üß™ TEST GRAPHQL RAPIDE")
    
    time.sleep(3)  # Attendre d√©marrage
    
    try:
        response = requests.get("http://localhost:8000/graphql/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ GraphQL FONCTIONNE !")
            return True
        else:
            print(f"‚ö†Ô∏è GraphQL Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå GraphQL Erreur: {e}")
        return False

def creer_swagger_simple():
    """Cr√©er une configuration Swagger simple qui fonctionne"""
    
    print("üìö CONFIGURATION SWAGGER SIMPLE")
    
    # Cr√©er une vue simple pour Swagger
    swagger_simple = '''"""
Vue simple pour documentation API
"""

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def api_documentation(request):
    """Documentation API simple"""
    
    docs = {
        "title": "üöÄ ALX Project Nexus API",
        "version": "1.0.0",
        "description": "API compl√®te pour r√©seau social ALX",
        "endpoints": {
            "graphql": {
                "url": "/graphql/",
                "description": "Interface GraphQL principale",
                "methods": ["GET", "POST"],
                "features": [
                    "üë• Gestion utilisateurs",
                    "üìù Publications et commentaires", 
                    "‚ù§Ô∏è Likes et interactions",
                    "üîç Recherche avanc√©e",
                    "üîê Authentification JWT"
                ]
            },
            "admin": {
                "url": "/admin/",
                "description": "Interface d'administration Django",
                "methods": ["GET", "POST"]
            }
        },
        "authentication": {
            "type": "JWT",
            "header": "Authorization: JWT <token>",
            "expiration": "60 minutes"
        },
        "examples": {
            "create_user": {
                "query": """
mutation {
  createUser(
    username: "testuser"
    email: "test@example.com"
    password: "password123"
  ) {
    user {
      id
      username
      email
    }
    success
    errors
  }
}
                """.strip()
            },
            "login": {
                "query": """
mutation {
  tokenAuth(email: "test@example.com", password: "password123") {
    token
    payload
  }
}
                """.strip()
            },
            "get_posts": {
                "query": """
query {
  allPosts {
    id
    content
    author {
      username
    }
    likesCount
  }
}
                """.strip()
            }
        }
    }
    
    return JsonResponse(docs, json_dumps_params={'indent': 2})

@csrf_exempt  
def api_health(request):
    """Health check simple"""
    return JsonResponse({
        "status": "healthy",
        "service": "ALX Project Nexus",
        "endpoints": {
            "graphql": "http://localhost:8000/graphql/",
            "admin": "http://localhost:8000/admin/",
            "docs": "http://localhost:8000/api/docs/"
        }
    })
'''
    
    with open('social_media_backend/simple_api.py', 'w', encoding='utf-8') as f:
        f.write(swagger_simple)
    
    print("‚úÖ Documentation API simple cr√©√©e")

def ajouter_urls_documentation():
    """Ajouter les URLs de documentation"""
    
    print("üîó AJOUT URLS DOCUMENTATION")
    
    urls_avec_docs = '''"""
URLs configuration for social_media_backend project.
"""

from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from graphene_django.views import GraphQLView
from .simple_api import api_documentation, api_health

urlpatterns = [
    # Admin
    path('admin/', admin.site.urls),
    
    # GraphQL (PRIORIT√â)
    path('graphql/', GraphQLView.as_view(graphiql=True)),
    
    # Documentation API Simple
    path('api/docs/', api_documentation, name='api-docs'),
    path('api/health/', api_health, name='api-health'),
]

# Servir les fichiers statiques en d√©veloppement
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
'''
    
    with open('social_media_backend/urls.py', 'w', encoding='utf-8') as f:
        f.write(urls_avec_docs)
    
    print("‚úÖ URLs avec documentation ajout√©es")

def main():
    """Fix urgence complet"""
    
    print("üö® FIX URGENCE ALX PROJECT NEXUS")
    print("=" * 60)
    
    # √âtape 1: Restaurer configuration simple
    restaurer_urls_simple()
    desactiver_swagger_temporaire()
    supprimer_api_views()
    
    # √âtape 2: Red√©marrer
    redemarrer_docker()
    
    # √âtape 3: Tester GraphQL
    if tester_graphql_rapide():
        print("üéØ GraphQL OK - Ajout documentation")
        
        # √âtape 4: Ajouter documentation simple
        creer_swagger_simple()
        ajouter_urls_documentation()
        
        # √âtape 5: Red√©marrage final
        redemarrer_docker()
        
        # Test final
        if tester_graphql_rapide():
            print("üéä PROJET ALX RESTAUR√â ET FONCTIONNEL !")
            print("‚úÖ GraphQL: http://localhost:8000/graphql/")
            print("‚úÖ Admin: http://localhost:8000/admin/")
            print("‚úÖ Docs: http://localhost:8000/api/docs/")
            print("‚úÖ Health: http://localhost:8000/api/health/")
        else:
            print("‚ö†Ô∏è Probl√®me persistant - Utiliser GraphQL seulement")
    else:
        print("‚ùå Probl√®me critique - V√©rifier Docker")
    
    print("\nüéØ PR√äT POUR PR√âSENTATION ALX !")

if __name__ == "__main__":
    main()
