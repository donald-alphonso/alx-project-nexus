#!/usr/bin/env python3
"""
D√©monstration rapide du syst√®me de likes
"""

import requests
import json

def demo_likes():
    """D√©monstration compl√®te du syst√®me de likes"""
    
    print("üëç D√âMONSTRATION SYST√àME DE LIKES")
    print("=" * 50)
    
    base_url = "http://localhost:8000/graphql/"
    
    # Utiliser le token g√©n√©r√© pr√©c√©demment
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXIxNzU0NzQ3NjU5QGV4YW1wbGUuY29tIiwidXNlcm5hbWUiOiJ1c2VyMTc1NDc0NzY1OSIsImV4cCI6MTc1NDc1MTI1OSwib3JpZ0lhdCI6MTc1NDc0NzY1OX0.ARUPjl5uYN4qTCvL-TFbecU8GgtSLPmd0kyFmf5VSts"
    
    headers = {
        "Authorization": f"JWT {token}",
        "Content-Type": "application/json"
    }
    
    # √âtape 1 : Voir les posts disponibles
    print("\n1Ô∏è‚É£ R√©cup√©ration des posts disponibles...")
    
    all_posts_query = {
        "query": """
        query {
            allPosts {
                id
                content
                author {
                    username
                }
                likesCount
            }
        }
        """
    }
    
    try:
        response = requests.post(base_url, json=all_posts_query, timeout=10)
        result = response.json()
        
        if 'errors' in result:
            print(f"‚ùå Erreur r√©cup√©ration posts : {result['errors']}")
            return False
        
        posts = result.get('data', {}).get('allPosts', [])
        
        if not posts:
            print("‚ö†Ô∏è Aucun post trouv√© - Cr√©ation d'un post de test...")
            
            # Cr√©er un post de test
            create_post_query = {
                "query": """
                mutation {
                    createPost(content: "Post de d√©monstration pour les likes ! üëçüöÄ") {
                        post {
                            id
                            content
                            likesCount
                        }
                        success
                        errors
                    }
                }
                """
            }
            
            response = requests.post(base_url, json=create_post_query, headers=headers, timeout=10)
            result = response.json()
            
            if 'errors' in result:
                print(f"‚ùå Erreur cr√©ation post : {result['errors']}")
                return False
            
            post_data = result.get('data', {}).get('createPost', {})
            if post_data.get('success'):
                print(f"‚úÖ Post cr√©√© : ID {post_data['post']['id']}")
                posts = [post_data['post']]
            else:
                print(f"‚ùå √âchec cr√©ation post : {post_data.get('errors', [])}")
                return False
        
        print(f"‚úÖ {len(posts)} posts trouv√©s")
        
        # Afficher les premiers posts
        print("\nüìã Posts disponibles :")
        for i, post in enumerate(posts[:5], 1):
            print(f"  {i}. ID {post['id']}: {post['content'][:50]}... (üëç {post['likesCount']} likes)")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration posts : {e}")
        return False
    
    # √âtape 2 : Liker les premiers posts
    print(f"\n2Ô∏è‚É£ Test de likes sur les premiers posts...")
    
    posts_a_liker = posts[:3]  # Liker les 3 premiers posts
    likes_reussis = 0
    
    for i, post in enumerate(posts_a_liker, 1):
        print(f"\nüëç Like du post {i} (ID: {post['id']})...")
        
        like_post_query = {
            "query": f"""
            mutation {{
                likePost(postId: {post['id']}) {{
                    like {{
                        id
                        user {{
                            username
                        }}
                        createdAt
                    }}
                    success
                    errors
                }}
            }}
            """
        }
        
        try:
            response = requests.post(base_url, json=like_post_query, headers=headers, timeout=10)
            result = response.json()
            
            if 'errors' in result:
                print(f"‚ùå Erreur like : {result['errors']}")
            else:
                like_data = result.get('data', {}).get('likePost', {})
                if like_data.get('success'):
                    like = like_data.get('like')
                    if like:
                        print(f"‚úÖ Like ajout√© par {like['user']['username']}")
                        likes_reussis += 1
                    else:
                        print("‚úÖ Like enregistr√© (peut-√™tre d√©j√† existant)")
                        likes_reussis += 1
                else:
                    print(f"‚ùå √âchec like : {like_data.get('errors', [])}")
        except Exception as e:
            print(f"‚ùå Erreur like : {e}")
    
    print(f"\n‚úÖ {likes_reussis} likes trait√©s avec succ√®s")
    
    # √âtape 3 : V√©rifier les likes ajout√©s
    print(f"\n3Ô∏è‚É£ V√©rification des likes ajout√©s...")
    
    try:
        response = requests.post(base_url, json=all_posts_query, timeout=10)
        result = response.json()
        
        if 'errors' not in result:
            posts_updated = result.get('data', {}).get('allPosts', [])
            
            print(f"\nüìä √âtat des likes apr√®s test :")
            for post in posts_updated[:5]:
                print(f"  - ID {post['id']}: {post['content'][:50]}... (üëç {post['likesCount']} likes)")
            
        else:
            print(f"‚ùå Erreur v√©rification : {result['errors']}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification : {e}")
    
    return True

def afficher_instructions_manuelles():
    """Afficher les instructions pour tests manuels"""
    
    print("\n" + "=" * 60)
    print("üìã INSTRUCTIONS POUR TESTS MANUELS")
    print("=" * 60)
    
    print("\nüîë Token JWT √† utiliser :")
    print("JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXIxNzU0NzQ3NjU5QGV4YW1wbGUuY29tIiwidXNlcm5hbWUiOiJ1c2VyMTc1NDc0NzY1OSIsImV4cCI6MTc1NDc1MTI1OSwib3JpZ0lhdCI6MTc1NDc0NzY1OX0.ARUPjl5uYN4qTCvL-TFbecU8GgtSLPmd0kyFmf5VSts")
    
    print("\nüöÄ √âtapes dans le navigateur :")
    print("1. Aller sur : http://localhost:8000/graphql/")
    print("2. Cliquer 'HTTP Headers' et ajouter :")
    print('   {"Authorization": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXIxNzU0NzQ3NjU5QGV4YW1wbGUuY29tIiwidXNlcm5hbWUiOiJ1c2VyMTc1NDc0NzY1OSIsImV4cCI6MTc1NDc1MTI1OSwib3JpZ0lhdCI6MTc1NDc0NzY1OX0.ARUPjl5uYN4qTCvL-TFbecU8GgtSLPmd0kyFmf5VSts"}')
    
    print("\nüëÄ 3. Voir les posts :")
    print("""
query {
  allPosts {
    id
    content
    author {
      username
    }
    likesCount
  }
}
    """)
    
    print("\nüëç 4. Liker un post (remplacer l'ID) :")
    print("""
mutation {
  likePost(postId: 1) {
    like {
      id
      user {
        username
      }
    }
    success
    errors
  }
}
    """)
    
    print("\n‚úÖ 5. V√©rifier le like (relancer la query des posts)")
    print("   ‚Üí Le likesCount doit avoir augment√© !")

if __name__ == "__main__":
    print("üéØ D√âMONSTRATION COMPL√àTE DU SYST√àME DE LIKES")
    print("=" * 70)
    
    # Lancer la d√©monstration
    success = demo_likes()
    
    # Afficher les instructions manuelles
    afficher_instructions_manuelles()
    
    print("\n" + "=" * 70)
    if success:
        print("üéä D√âMONSTRATION R√âUSSIE ! Syst√®me de likes fonctionnel !")
    else:
        print("‚ö†Ô∏è D√©monstration partielle - V√©rifiez les erreurs")
    
    print("üåü Testez maintenant manuellement dans votre navigateur !")
