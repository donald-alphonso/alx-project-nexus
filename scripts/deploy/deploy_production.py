#!/usr/bin/env python3
"""
Script de d√©ploiement automatis√© pour ALX Project Nexus
Pr√©pare l'application pour le d√©ploiement en production
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCCESS")
            return True
        else:
            print(f"‚ùå {description} - FAILED")
            print(f"Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - ERROR: {e}")
        return False

def check_requirements():
    """V√©rifie que tous les fichiers requis sont pr√©sents"""
    print("\nüìã V√âRIFICATION DES FICHIERS REQUIS")
    print("=" * 50)
    
    required_files = [
        'requirements-production.txt',
        'Procfile',
        'runtime.txt',
        'social_media_backend/settings/production.py',
        'manage.py',
        'docker-compose.yml'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            missing_files.append(file_path)
    
    return len(missing_files) == 0

def collect_static_files():
    """Collecte les fichiers statiques"""
    print("\nüì¶ COLLECTE DES FICHIERS STATIQUES")
    print("=" * 50)
    
    # Cr√©er le dossier staticfiles s'il n'existe pas
    os.makedirs('staticfiles', exist_ok=True)
    
    # Collecter les fichiers statiques
    return run_command(
        'python manage.py collectstatic --noinput --settings=social_media_backend.settings.production',
        "Collecte des fichiers statiques"
    )

def run_migrations():
    """Ex√©cute les migrations de base de donn√©es"""
    print("\nüóÑÔ∏è MIGRATIONS DE BASE DE DONN√âES")
    print("=" * 50)
    
    return run_command(
        'python manage.py migrate --settings=social_media_backend.settings.production',
        "Ex√©cution des migrations"
    )

def create_superuser():
    """Cr√©e un superutilisateur pour la production"""
    print("\nüë§ CR√âATION DU SUPERUTILISATEUR")
    print("=" * 50)
    
    # Script pour cr√©er un superuser automatiquement
    create_superuser_script = """
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'social_media_backend.settings.production')
django.setup()

from django.contrib.auth import get_user_model
User = get_user_model()

if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser(
        username='admin',
        email='admin@alxprojectnexus.com',
        password='admin123',
        first_name='Admin',
        last_name='ALX'
    )
    print('‚úÖ Superuser cr√©√©: admin / admin123')
else:
    print('‚ÑπÔ∏è Superuser existe d√©j√†')
"""
    
    with open('create_superuser.py', 'w') as f:
        f.write(create_superuser_script)
    
    success = run_command('python create_superuser.py', "Cr√©ation du superutilisateur")
    
    # Nettoyer le fichier temporaire
    if os.path.exists('create_superuser.py'):
        os.remove('create_superuser.py')
    
    return success

def test_production_settings():
    """Test les param√®tres de production"""
    print("\nüß™ TEST DES PARAM√àTRES DE PRODUCTION")
    print("=" * 50)
    
    return run_command(
        'python manage.py check --deploy --settings=social_media_backend.settings.production',
        "V√©rification des param√®tres de d√©ploiement"
    )

def create_env_template():
    """Cr√©e un template de fichier .env pour la production"""
    print("\nüìù CR√âATION DU TEMPLATE .env")
    print("=" * 50)
    
    env_template = """# ALX Project Nexus - Production Environment Variables
# Copy this file to .env and fill in your actual values

# Django
SECRET_KEY=your-super-secret-key-here-change-this
DEBUG=False
ALLOWED_HOSTS=your-domain.com,*.railway.app,*.render.com

# Database (will be provided by hosting platform)
DATABASE_URL=postgresql://user:password@host:port/database

# Redis (will be provided by hosting platform)
REDIS_URL=redis://user:password@host:port/0

# Security (enable for HTTPS)
SECURE_SSL_REDIRECT=True

# CORS (add your frontend domains)
CORS_ALLOWED_ORIGINS=https://your-frontend.com,https://www.your-frontend.com

# Email (optional - for notifications)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
DEFAULT_FROM_EMAIL=noreply@your-domain.com

# API Base URL (for documentation)
API_BASE_URL=https://your-app.railway.app
"""
    
    with open('.env.production.template', 'w') as f:
        f.write(env_template)
    
    print("‚úÖ Template .env.production.template cr√©√©")
    return True

def generate_deployment_summary():
    """G√©n√®re un r√©sum√© du d√©ploiement"""
    print("\nüìä G√âN√âRATION DU R√âSUM√â DE D√âPLOIEMENT")
    print("=" * 50)
    
    summary = f"""# üöÄ ALX Project Nexus - R√©sum√© de D√©ploiement

## ‚úÖ Fichiers de D√©ploiement Cr√©√©s

### üì¶ Fichiers Principaux:
- `requirements-production.txt` - D√©pendances Python pour production
- `Procfile` - Configuration des processus (web, worker, beat)
- `runtime.txt` - Version Python sp√©cifi√©e
- `social_media_backend/settings/production.py` - Param√®tres de production

### üîß Fichiers de Configuration:
- `.env.production.template` - Template des variables d'environnement
- `staticfiles/` - Fichiers statiques collect√©s

## üåê Plateformes de D√©ploiement Recommand√©es

### 1. Railway (Recommand√©)
- URL: https://railway.app/
- D√©ploiement: Connecter le repo GitHub
- Base de donn√©es: PostgreSQL automatique
- Redis: Service Redis automatique

### 2. Render
- URL: https://render.com/
- D√©ploiement: Connecter le repo GitHub
- Base de donn√©es: PostgreSQL gratuit
- Redis: Service Redis gratuit

### 3. Heroku
- URL: https://heroku.com/
- D√©ploiement: Git push heroku main
- Add-ons: Heroku Postgres, Heroku Redis

## üìã Variables d'Environnement Requises

```env
SECRET_KEY=your-secret-key
DEBUG=False
ALLOWED_HOSTS=*.railway.app
DATABASE_URL=postgresql://... (auto-g√©n√©r√©)
REDIS_URL=redis://... (auto-g√©n√©r√©)
```

## üîó URLs de l'Application D√©ploy√©e

Une fois d√©ploy√©, votre application sera accessible √†:
- **Application principale**: https://your-app.railway.app/
- **GraphQL API**: https://your-app.railway.app/graphql/
- **API Documentation**: https://your-app.railway.app/api/docs/
- **Admin Interface**: https://your-app.railway.app/admin/

## üë§ Compte Admin par D√©faut

- **Username**: admin
- **Email**: admin@alxprojectnexus.com
- **Password**: admin123

‚ö†Ô∏è **IMPORTANT**: Changez ce mot de passe apr√®s le premier d√©ploiement!

## üéØ Pour la Soumission ALX

Incluez ces liens dans votre soumission:
1. **Live Application**: [URL de votre app]
2. **GitHub Repository**: https://github.com/your-username/alx-project-nexus
3. **API Documentation**: [URL]/api/docs/
4. **GraphQL Playground**: [URL]/graphql/

---

**üéä Votre application est pr√™te pour le d√©ploiement en production!**
"""
    
    with open('DEPLOYMENT_SUMMARY.md', 'w', encoding='utf-8') as f:
        f.write(summary)
    
    print("‚úÖ R√©sum√© de d√©ploiement cr√©√©: DEPLOYMENT_SUMMARY.md")
    return True

def main():
    """Fonction principale du script de d√©ploiement"""
    print("üöÄ SCRIPT DE D√âPLOIEMENT ALX PROJECT NEXUS")
    print("=" * 60)
    print("Pr√©paration de l'application pour le d√©ploiement en production")
    print("=" * 60)
    
    # V√©rifier les fichiers requis
    if not check_requirements():
        print("\n‚ùå Des fichiers requis sont manquants. Arr√™t du script.")
        return False
    
    # √âtapes de pr√©paration
    steps = [
        ("Cr√©ation du template .env", create_env_template),
        ("Collecte des fichiers statiques", collect_static_files),
        ("Test des param√®tres de production", test_production_settings),
        ("G√©n√©ration du r√©sum√© de d√©ploiement", generate_deployment_summary),
    ]
    
    success_count = 0
    for step_name, step_function in steps:
        if step_function():
            success_count += 1
        else:
            print(f"‚ö†Ô∏è √âtape '{step_name}' a √©chou√©, mais on continue...")
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â FINAL")
    print("=" * 60)
    
    print(f"√âtapes compl√©t√©es: {success_count}/{len(steps)}")
    
    if success_count >= len(steps) - 1:  # Permettre 1 √©chec
        print("\nüéä D√âPLOIEMENT PR√äT!")
        print("‚úÖ Votre application est pr√™te pour le d√©ploiement")
        print("\nüìã PROCHAINES √âTAPES:")
        print("1. Cr√©er un compte sur Railway/Render/Heroku")
        print("2. Connecter votre repository GitHub")
        print("3. Configurer les variables d'environnement")
        print("4. D√©ployer l'application")
        print("5. Tester les endpoints en production")
        
        print("\nüîó LIENS UTILES:")
        print("‚Ä¢ Guide de d√©ploiement: docs/deployment/DEPLOYMENT_GUIDE.md")
        print("‚Ä¢ R√©sum√©: DEPLOYMENT_SUMMARY.md")
        print("‚Ä¢ Template .env: .env.production.template")
        
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS")
        print("V√©rifiez les erreurs ci-dessus avant de d√©ployer")
    
    return success_count >= len(steps) - 1

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Script interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        sys.exit(1)
