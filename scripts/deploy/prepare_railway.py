#!/usr/bin/env python3
"""
Script de Pr√©paration Railway - ALX Project Nexus
Pr√©pare tous les fichiers n√©cessaires pour le d√©ploiement Railway
"""

import os
import sys
import subprocess
from datetime import datetime

def print_step(step_num, title):
    """Affiche une √©tape avec formatage"""
    print(f"\n{'='*60}")
    print(f"üöÄ √âTAPE {step_num}: {title}")
    print(f"{'='*60}")

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} - MANQUANT")
        return False

def create_railway_env_template():
    """Cr√©e un template sp√©cifique pour Railway"""
    print_step(1, "CR√âATION TEMPLATE VARIABLES RAILWAY")
    
    railway_env = """# üöÄ Variables d'Environnement Railway - ALX Project Nexus
# Copie ces variables dans Railway Dashboard > Variables

# ===== DJANGO CORE =====
SECRET_KEY=django-insecure-alx-project-nexus-2025-change-this-in-real-production
DEBUG=False
DJANGO_SETTINGS_MODULE=social_media_backend.settings.production
ALLOWED_HOSTS=*.railway.app

# ===== DATABASE =====
# Cette variable sera automatiquement g√©n√©r√©e par Railway PostgreSQL
# DATABASE_URL=postgresql://postgres:password@host:port/database

# ===== REDIS =====
# Cette variable sera automatiquement g√©n√©r√©e par Railway Redis
# REDIS_URL=redis://default:password@host:port

# ===== SECURITY =====
SECURE_SSL_REDIRECT=True
CORS_ALLOWED_ORIGINS=https://*.railway.app

# ===== API DOCUMENTATION =====
# Remplace 'ton-app' par le nom de ton app Railway
API_BASE_URL=https://ton-app.railway.app

# ===== EMAIL (OPTIONNEL) =====
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_HOST_USER=ton-email@gmail.com
# EMAIL_HOST_PASSWORD=ton-mot-de-passe-app
# DEFAULT_FROM_EMAIL=noreply@alxprojectnexus.com

# ===== INSTRUCTIONS =====
# 1. Va sur Railway Dashboard
# 2. Clique sur ton service Django
# 3. Onglet "Variables"
# 4. Ajoute chaque variable (sauf DATABASE_URL et REDIS_URL qui sont auto)
# 5. Clique "Deploy" pour red√©marrer
"""
    
    with open('.env.railway', 'w', encoding='utf-8') as f:
        f.write(railway_env)
    
    print("‚úÖ Template cr√©√©: .env.railway")
    print("üìã Utilise ce fichier pour configurer tes variables sur Railway")
    return True

def verify_deployment_files():
    """V√©rifie que tous les fichiers de d√©ploiement sont pr√©sents"""
    print_step(2, "V√âRIFICATION FICHIERS D√âPLOIEMENT")
    
    required_files = [
        ('Procfile', 'Configuration des processus Railway'),
        ('requirements-production.txt', 'D√©pendances Python'),
        ('runtime.txt', 'Version Python'),
        ('social_media_backend/settings/production.py', 'Param√®tres production'),
        ('manage.py', 'Script de gestion Django'),
        ('social_media_backend/wsgi.py', 'Interface WSGI')
    ]
    
    all_present = True
    for filepath, description in required_files:
        if not check_file_exists(filepath, description):
            all_present = False
    
    return all_present

def test_production_settings():
    """Teste les param√®tres de production"""
    print_step(3, "TEST PARAM√àTRES PRODUCTION")
    
    # D√©finir les variables d'environnement pour le test
    os.environ['SECRET_KEY'] = 'test-key-for-validation'
    os.environ['DEBUG'] = 'False'
    os.environ['DATABASE_URL'] = 'sqlite:///test.db'
    os.environ['REDIS_URL'] = 'redis://localhost:6379/0'
    os.environ['ALLOWED_HOSTS'] = '*.railway.app'
    
    try:
        # Test d'import des settings
        result = subprocess.run([
            sys.executable, '-c',
            'import os; os.environ.setdefault("DJANGO_SETTINGS_MODULE", "social_media_backend.settings.production"); import django; django.setup(); print("‚úÖ Settings production OK")'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Param√®tres de production valides")
            return True
        else:
            print(f"‚ùå Erreur dans les param√®tres: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def create_railway_checklist():
    """Cr√©e une checklist pour Railway"""
    print_step(4, "CR√âATION CHECKLIST RAILWAY")
    
    checklist = f"""# üìã Checklist D√©ploiement Railway - ALX Project Nexus

## ‚úÖ AVANT DE COMMENCER
- [ ] Compte GitHub avec le projet ALX
- [ ] Branche `feature/deployment-production` active
- [ ] Tous les fichiers de d√©ploiement pr√©sents
- [ ] 30 minutes de temps libre

## üöÄ √âTAPES RAILWAY (Dans l'ordre)

### 1. Cr√©ation du Compte
- [ ] Aller sur https://railway.app/
- [ ] S'inscrire avec GitHub
- [ ] Autoriser l'acc√®s aux repos

### 2. Nouveau Projet
- [ ] "New Project" ‚Üí "Deploy from GitHub repo"
- [ ] S√©lectionner `alx-project-nexus`
- [ ] Branche: `feature/deployment-production`
- [ ] Cliquer "Deploy Now"

### 3. Ajouter PostgreSQL
- [ ] "New Service" ‚Üí "Database" ‚Üí "PostgreSQL"
- [ ] Copier `DATABASE_URL` depuis Variables

### 4. Ajouter Redis
- [ ] "New Service" ‚Üí "Database" ‚Üí "Redis"
- [ ] Copier `REDIS_URL` depuis Variables

### 5. Variables d'Environnement
- [ ] Service Django ‚Üí Onglet "Variables"
- [ ] Ajouter toutes les variables du fichier `.env.railway`
- [ ] ‚ö†Ô∏è NE PAS ajouter DATABASE_URL et REDIS_URL (auto-g√©n√©r√©es)

### 6. Red√©ploiement
- [ ] Attendre le d√©ploiement automatique
- [ ] V√©rifier les logs (onglet "Logs")
- [ ] Pas d'erreurs critiques

### 7. Migrations
- [ ] Console ‚Üí `python manage.py migrate --settings=social_media_backend.settings.production`
- [ ] Console ‚Üí `python manage.py collectstatic --noinput --settings=social_media_backend.settings.production`

### 8. Superuser
- [ ] Console ‚Üí `python manage.py shell --settings=social_media_backend.settings.production`
- [ ] Cr√©er admin avec le script fourni

### 9. Tests Finaux
- [ ] https://ton-app.railway.app/ ‚Üí Page d'accueil
- [ ] https://ton-app.railway.app/admin/ ‚Üí Login admin/admin123
- [ ] https://ton-app.railway.app/graphql/ ‚Üí Interface GraphQL
- [ ] https://ton-app.railway.app/api/docs/ ‚Üí Documentation Swagger

## üéØ URLS POUR ALX
```
Application: https://ton-app.railway.app/
GraphQL: https://ton-app.railway.app/graphql/
API Docs: https://ton-app.railway.app/api/docs/
Admin: https://ton-app.railway.app/admin/
GitHub: https://github.com/ton-username/alx-project-nexus
```

## üÜò EN CAS DE PROBL√àME
1. V√©rifier les logs Railway
2. V√©rifier les variables d'environnement
3. Red√©marrer le service
4. Consulter le guide complet: docs/deployment/RAILWAY_GUIDE_COMPLET.md

---
**Cr√©√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}**
**üöÄ Bon d√©ploiement !**
"""
    
    with open('RAILWAY_CHECKLIST.md', 'w', encoding='utf-8') as f:
        f.write(checklist)
    
    print("‚úÖ Checklist cr√©√©e: RAILWAY_CHECKLIST.md")
    return True

def create_superuser_script():
    """Cr√©e un script pour cr√©er le superuser"""
    print_step(5, "CR√âATION SCRIPT SUPERUSER")
    
    superuser_script = """# Script pour cr√©er un superuser sur Railway
# √Ä ex√©cuter dans la console Railway

python manage.py shell --settings=social_media_backend.settings.production

# Puis dans le shell Python :
from django.contrib.auth import get_user_model
User = get_user_model()

# Cr√©er le superuser
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser(
        username='admin',
        email='admin@alxprojectnexus.com',
        password='admin123',
        first_name='Admin',
        last_name='ALX'
    )
    print('‚úÖ Superuser cr√©√©: admin / admin123')
else:
    print('‚ÑπÔ∏è Superuser existe d√©j√†')

# Sortir du shell
exit()
"""
    
    with open('create_superuser_railway.txt', 'w', encoding='utf-8') as f:
        f.write(superuser_script)
    
    print("‚úÖ Script superuser cr√©√©: create_superuser_railway.txt")
    return True

def generate_summary():
    """G√©n√®re un r√©sum√© de pr√©paration"""
    print_step(6, "R√âSUM√â DE PR√âPARATION")
    
    print("üìä FICHIERS CR√â√âS POUR RAILWAY:")
    print("   ‚Ä¢ .env.railway - Template des variables d'environnement")
    print("   ‚Ä¢ RAILWAY_CHECKLIST.md - Checklist √©tape par √©tape")
    print("   ‚Ä¢ create_superuser_railway.txt - Script pour admin")
    
    print("\nüìã FICHIERS EXISTANTS V√âRIFI√âS:")
    print("   ‚Ä¢ Procfile - Configuration des processus")
    print("   ‚Ä¢ requirements-production.txt - D√©pendances")
    print("   ‚Ä¢ runtime.txt - Version Python")
    print("   ‚Ä¢ settings/production.py - Configuration production")
    
    print("\nüéØ PROCHAINES √âTAPES:")
    print("   1. Ouvre RAILWAY_CHECKLIST.md")
    print("   2. Suis les √©tapes une par une")
    print("   3. Utilise .env.railway pour les variables")
    print("   4. Teste ton application d√©ploy√©e")
    
    print("\nüîó LIENS UTILES:")
    print("   ‚Ä¢ Railway: https://railway.app/")
    print("   ‚Ä¢ Guide complet: docs/deployment/RAILWAY_GUIDE_COMPLET.md")
    print("   ‚Ä¢ Checklist: RAILWAY_CHECKLIST.md")

def main():
    """Fonction principale"""
    print("üöÄ PR√âPARATION RAILWAY - ALX PROJECT NEXUS")
    print(f"Heure: {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)
    
    # V√©rifier qu'on est sur la bonne branche
    try:
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True)
        current_branch = result.stdout.strip()
        
        if current_branch != 'feature/deployment-production':
            print(f"‚ö†Ô∏è Tu es sur la branche '{current_branch}'")
            print("üîÑ Recommandation: git checkout feature/deployment-production")
        else:
            print(f"‚úÖ Branche correcte: {current_branch}")
    except:
        print("‚ÑπÔ∏è Impossible de v√©rifier la branche Git")
    
    # √âtapes de pr√©paration
    steps = [
        create_railway_env_template,
        verify_deployment_files,
        test_production_settings,
        create_railway_checklist,
        create_superuser_script,
        generate_summary
    ]
    
    success_count = 0
    for step_func in steps:
        try:
            if step_func():
                success_count += 1
        except Exception as e:
            print(f"‚ùå Erreur dans l'√©tape: {e}")
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    print("üìä R√âSUM√â FINAL")
    print(f"{'='*60}")
    
    print(f"√âtapes compl√©t√©es: {success_count}/{len(steps)}")
    
    if success_count == len(steps):
        print("\nüéä PR√âPARATION RAILWAY TERMIN√âE !")
        print("‚úÖ Tous les fichiers sont pr√™ts")
        print("üìã Suis maintenant RAILWAY_CHECKLIST.md")
        print("üöÄ Temps estim√© de d√©ploiement: 30-45 minutes")
    else:
        print("\n‚ö†Ô∏è Quelques probl√®mes d√©tect√©s")
        print("üîß V√©rifie les erreurs ci-dessus")
    
    return success_count == len(steps)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Pr√©paration interrompue")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur: {e}")
        sys.exit(1)
