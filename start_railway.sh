#!/bin/bash
# Script de d√©marrage Railway pour ALX Project Nexus

# D√©finir le port par d√©faut si pas d√©fini
export PORT=${PORT:-8000}

echo "üöÄ D√©marrage ALX Project Nexus sur le port $PORT"

# Debug: Afficher les variables d'environnement li√©es √† la base de donn√©es
echo "üîç DEBUG: Variables d'environnement disponibles:"
echo "DATABASE_URL: ${DATABASE_URL:-'NON D√âFINIE'}"
echo "PGDATABASE: ${PGDATABASE:-'NON D√âFINIE'}"
echo "PGUSER: ${PGUSER:-'NON D√âFINIE'}"
echo "PGHOST: ${PGHOST:-'NON D√âFINIE'}"
echo "PGPORT: ${PGPORT:-'NON D√âFINIE'}"
echo "PGPASSWORD: ${PGPASSWORD:-'NON D√âFINIE (masqu√©)'}"
echo "POSTGRES_URL: ${POSTGRES_URL:-'NON D√âFINIE'}"
echo "DB_URL: ${DB_URL:-'NON D√âFINIE'}"
echo "üîç Toutes les variables avec 'DATA' ou 'PG':"
env | grep -i -E '(data|pg|postgres)' || echo "Aucune variable trouv√©e"
echo "---"

# Migrations de base de donn√©es
echo "üìä Ex√©cution des migrations..."
python manage.py migrate --settings=social_media_backend.settings.production --noinput

# Collecte des fichiers statiques
echo "üì¶ Collecte des fichiers statiques..."
python manage.py collectstatic --settings=social_media_backend.settings.production --noinput

# Cr√©ation du superuser si n√©cessaire
echo "üë§ V√©rification du superuser..."
python manage.py shell --settings=social_media_backend.settings.production << EOF
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@alxprojectnexus.com', 'admin123')
    print('‚úÖ Superuser cr√©√©')
else:
    print('‚ÑπÔ∏è Superuser existe d√©j√†')
EOF

# D√©marrage du serveur
echo "üåê D√©marrage du serveur Gunicorn..."
exec gunicorn social_media_backend.wsgi:application --bind 0.0.0.0:$PORT --workers 2 --timeout 120
