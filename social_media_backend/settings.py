"""
Django settings for social_media_backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'eibdWBbjdl5TIv7TfAo2gYFPCVOdS31yLBVEz9IUKcfCsOUsgfAwgsHQV4h4Z-5pd48'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# ALLOWED_HOSTS for Railway deployment
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'graphene_django',
    'corsheaders',
    'rest_framework',
    'drf_spectacular',
    'django_celery_beat',
    
    # Local apps
    'social_media_backend.apps.SocialMediaBackendConfig',
    'users',
    'posts',
    'interactions',
    # 'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom error handling middleware
    'social_media_backend.error_handlers.GraphQLErrorMiddleware',
]

ROOT_URLCONF = 'social_media_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social_media_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database Configuration - Force SQLite for Railway reliability
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

print(f"üîç Database configured: {DATABASES['default']['ENGINE']}")
print(f"üìÅ Database file: {DATABASES['default']['NAME']}")
print(f"üì¶ INSTALLED_APPS count: {len(INSTALLED_APPS)}")
print(f"üîß DEBUG mode: {DEBUG}")
print(f"üåê ALLOWED_HOSTS: {ALLOWED_HOSTS}")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# GraphQL Configuration
GRAPHENE = {
    'SCHEMA': 'social_media_backend.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

# GraphQL JWT
GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': timedelta(minutes=60),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

CORS_ALLOW_CREDENTIALS = True

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'graphql_jwt.backends.JSONWebTokenBackend',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# GraphQL JWT Configuration
GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
    'JWT_EXPIRATION_DELTA': timedelta(minutes=60),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
    'JWT_ALGORITHM': 'HS256',
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALLOW_ANY_CLASSES': [
        'graphql_jwt.mutations.ObtainJSONWebToken',
        'graphql_jwt.mutations.Refresh',
        'graphql_jwt.mutations.Verify',
    ],
}

# Swagger/OpenAPI Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'ALX Project Nexus - GraphQL API',
    'DESCRIPTION': '''ALX Project Nexus - Modern Social Media Platform

A comprehensive GraphQL API for a modern social media platform built with Django.

## Features
- User Management: Registration, authentication, profiles
- Content Creation: Posts, comments, media sharing  
- Social Interactions: Likes, follows, notifications
- Advanced Search: Full-text search, hashtags, filters
- Real-time Updates: Live notifications and feeds
- Moderation Tools: Content reporting and management

## Authentication
This API uses JWT (JSON Web Tokens) for authentication.

### How to authenticate:
1. Create an account using createUser mutation
2. Login using tokenAuth mutation to get your JWT token
3. Include the token in your requests: Authorization: JWT <your-token>

## GraphQL Endpoint
All API operations are available through the GraphQL endpoint:
POST /graphql/

## Available Operations
- 20 Queries: Retrieve data (users, posts, feed, search, etc.)
- 18 Mutations: Modify data (create, update, delete, like, follow, etc.)

## Quick Start
1. Navigate to /graphql/ for the GraphiQL interface
2. Use the documentation explorer to discover all available operations
3. Test queries and mutations directly in the browser

Developed by Donald Ahossi - ALX Software Engineering Program 2025''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'tryItOutEnabled': True,
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENABLE_DJANGO_DEPLOY_CHECK': False,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'SERVE_AUTHENTICATION': [],
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/tmp/django.log',  # Use /tmp for Docker compatibility
            'formatter': 'verbose',
        } if not DEBUG else {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'graphql': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'social_media_backend': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Create logs directory if it doesn't exist (only in development)
if DEBUG:
    try:
        os.makedirs(BASE_DIR / 'logs', exist_ok=True)
    except Exception:
        pass  # Ignore if can't create logs directory

# ============================================================================
# ERROR HANDLING CONFIGURATION
# ============================================================================

# Custom error handlers
handler404 = 'social_media_backend.error_handlers.handle_404'
handler500 = 'social_media_backend.error_handlers.handle_500'
handler403 = 'social_media_backend.error_handlers.handle_403'

# GraphQL Error Handling
GRAPHQL_ERROR_HANDLING = {
    'ENABLE_CUSTOM_ERRORS': True,
    'LOG_ERRORS': True,
    'INCLUDE_TRACEBACK': DEBUG,
    'ERROR_CODES': {
        'VALIDATION_ERROR': 'VALIDATION_001',
        'AUTHENTICATION_REQUIRED': 'AUTH_001',
        'PERMISSION_DENIED': 'AUTH_002',
        'NOT_FOUND': 'RESOURCE_001',
        'DATABASE_ERROR': 'DB_001',
        'INTEGRITY_ERROR': 'DB_002',
        'INTERNAL_ERROR': 'SERVER_001',
        'RATE_LIMIT_EXCEEDED': 'RATE_001',
    }
}

# Rate Limiting Configuration
RATE_LIMITING = {
    'ENABLE': True,
    'MAX_REQUESTS_PER_MINUTE': 100,
    'MAX_REQUESTS_PER_HOUR': 1000,
    'BLOCK_DURATION': 300,  # 5 minutes
}

# API Security Configuration
API_SECURITY = {
    'REQUIRE_HTTPS': not DEBUG,
    'ENABLE_CORS': True,
    'MAX_REQUEST_SIZE': 10 * 1024 * 1024,  # 10MB
    'TIMEOUT': 30,
    'ENABLE_RATE_LIMITING': True,
}

# ============================================================================
# CELERY CONFIGURATION
# ============================================================================

# Celery Broker Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/1')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/1')

# Import schedule configuration
from .celery_schedule import (
    CELERY_BEAT_SCHEDULE,
    CELERY_TASK_ROUTES,
    CELERY_TASK_CONFIG,
    CELERY_MONITORING
)

# Apply Celery configuration
locals().update(CELERY_TASK_CONFIG)
locals().update(CELERY_MONITORING)

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = CELERY_BEAT_SCHEDULE
CELERY_TASK_ROUTES = CELERY_TASK_ROUTES

# Celery Timezone
CELERY_TIMEZONE = TIME_ZONE

# Celery Queues
try:
    from kombu import Queue
    CELERY_TASK_DEFAULT_QUEUE = 'default'
    CELERY_TASK_QUEUES = (
        Queue('default'),
        Queue('users'),
        Queue('media'),
        Queue('analytics'),
        Queue('maintenance'),
        Queue('emails'),
    )
except ImportError:
    # Fallback if kombu not available
    CELERY_TASK_DEFAULT_QUEUE = 'default'
    CELERY_TASK_QUEUES = None

# Celery Worker Configuration
CELERY_WORKER_CONCURRENCY = os.getenv('CELERY_WORKER_CONCURRENCY', 4)
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_WORKER_DISABLE_RATE_LIMITS = False

# Celery Logging
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_LOG_COLOR = True
