version: '3.8'

services:
  db:
    image: postgres:16
    ports:
      - "${POSTGRES_PORT:-5432}:5432"  # Port expos√© localement pour debug
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7.2-alpine
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  backend:
    build: .
    restart: always
    command: gunicorn social_media_backend.wsgi:application --bind 0.0.0.0:8000 --workers 2 --timeout 120
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=8000
      - traefik.http.routers.${STACK_NAME}-backend-https.rule=Host(`api.${STACK_NAME}.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME}-backend-https.tls.certresolver=le
      - traefik.http.routers.${STACK_NAME}-backend-http.rule=Host(`api.${STACK_NAME}.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-backend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-backend-http.middlewares=https-redirect
      - traefik.http.middlewares.${STACK_NAME}-backend-compress.compress=true
      - traefik.http.routers.${STACK_NAME}-backend-https.middlewares=${STACK_NAME}-backend-compress
    networks:
      - traefik-public
      - default

  celery:
    build: .
    restart: always
    command: celery -A social_media_backend worker --loglevel=info
    depends_on:
      - db
      - redis
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  celery-beat:
    build: .
    restart: always
    command: celery -A social_media_backend beat --loglevel=info
    depends_on:
      - db
      - redis
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  traefik-public:
    external: true
  default:
