"""
T√¢ches Celery pour l'application Users
"""

from celery import shared_task
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import timedelta
import logging

User = get_user_model()
logger = logging.getLogger(__name__)

@shared_task
def cleanup_expired_tokens():
    """Nettoyer les tokens JWT expir√©s"""
    try:
        # Logique de nettoyage des tokens expir√©s
        logger.info("üßπ Nettoyage des tokens expir√©s d√©marr√©")
        
        # Ici vous pouvez ajouter la logique pour nettoyer
        # les tokens expir√©s de votre base de donn√©es
        
        logger.info("‚úÖ Nettoyage des tokens termin√©")
        return "Tokens expir√©s nettoy√©s avec succ√®s"
    except Exception as e:
        logger.error(f"‚ùå Erreur nettoyage tokens : {e}")
        return f"Erreur : {e}"

@shared_task
def update_user_statistics():
    """Mettre √† jour les statistiques utilisateur"""
    try:
        logger.info("üìä Mise √† jour statistiques utilisateur d√©marr√©e")
        
        # Mettre √† jour les compteurs pour tous les utilisateurs
        users = User.objects.all()
        updated_count = 0
        
        for user in users:
            # Mettre √† jour followers_count
            user.followers_count = user.followers.count()
            # Mettre √† jour following_count  
            user.following_count = user.following.count()
            # Mettre √† jour posts_count
            user.posts_count = user.posts.count()
            user.save(update_fields=['followers_count', 'following_count', 'posts_count'])
            updated_count += 1
        
        logger.info(f"‚úÖ Statistiques mises √† jour pour {updated_count} utilisateurs")
        return f"Statistiques mises √† jour pour {updated_count} utilisateurs"
    except Exception as e:
        logger.error(f"‚ùå Erreur mise √† jour statistiques : {e}")
        return f"Erreur : {e}"

@shared_task
def send_welcome_email(user_id):
    """Envoyer un email de bienvenue √† un nouvel utilisateur"""
    try:
        user = User.objects.get(id=user_id)
        logger.info(f"üìß Envoi email de bienvenue √† {user.email}")
        
        # Ici vous pouvez ajouter la logique d'envoi d'email
        # Par exemple avec Django's send_mail ou un service externe
        
        logger.info(f"‚úÖ Email de bienvenue envoy√© √† {user.email}")
        return f"Email de bienvenue envoy√© √† {user.email}"
    except User.DoesNotExist:
        logger.error(f"‚ùå Utilisateur {user_id} non trouv√©")
        return f"Utilisateur {user_id} non trouv√©"
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi email : {e}")
        return f"Erreur : {e}"
